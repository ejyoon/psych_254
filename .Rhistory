group_by(subid, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
)
ds_byCond
ds_byCond <- ds %>%
group_by(subid, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
) %>%
spread(congruent, mean)
ds_byCond
ds_byCond <- ds %>%
group_by(subid, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
) %>%
spread(congruent, mean) %>%
mutate(diff = yes - no)
ds_byCond
ds_means <- ds_byCond %>%
group_by(presentation.time) %>%
summarise(
mean = mean(diff, na.rm = TRUE),
sem = sem(na.omit(diff))
)
ds_means
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_byCond, geom="bar", stat="identity",
position="dodge") +
geom_errorbar(aes(ymax=mean+sem,
ymin=mean-sem),
position=position_dodge(),
data=ds_byCond)
means.barplot
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_byCond, geom="bar", stat="identity",
position="dodge") +
geom_errorbar(aes(ymax=mean+sem,
ymin=mean-sem),
position=position_dodge()
)
means.barplot
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_byCond, geom="bar", stat="identity",
position="dodge")
means.barplot
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_byCond
)
means.barplot
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_means, geom="bar", stat="identity",
position="dodge") +
geom_errorbar(aes(ymax=mean+sem,
ymin=mean-sem),
position=position_dodge()
)
means.barplot
ds_byCond <- ds %>%
group_by(subid, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
)
head(ds_byCond)
ds_byCond <- ds %>%
group_by(subid, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
) %>%
spread(congruent, mean) %>%
mutate(diff = yes - no)
ds_byCond <- ds %>%
group_by(subid, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
) %>%
spread(congruent, mean) %>%
mutate(diff = no - yes)
ds_means <- ds_byCond %>%
group_by(presentation.time) %>%
summarise(
mean = mean(diff, na.rm = TRUE),
sem = sem(na.omit(diff))
)
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_means, geom="bar", stat="identity",
position="dodge") +
geom_errorbar(aes(ymax=mean+sem,
ymin=mean-sem),
position=position_dodge()
)
means.barplot
head(ds)
ds_byCond <- ds %>%
group_by(subid, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
)
head(ds_byCond)
head(ds)
levels(ds$operand)
summary(ds)
qplot(rt, data = ds, geom = histogram)
qplot(rt, data = ds, geom =
"histogram")
qplot(rt, data = ds, geom =
"histogram", facets= ~operand)
qplot(rt, data = ds, geom =
"histogram", facets= ~congruent)
qplot(rt, data = ds, geom =
"histogram", facets= ~congruent) + geom_vline(aes(xintercept=mean(rt, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ds_byCond <- ds %>%
group_by(subid, operand, presentation.time, congruent) %>%
summarise(
mean = mean(rt, na.rm = TRUE)
) %>%
spread(congruent, mean) %>%
mutate(diff = no - yes)
ds_means <- ds_byCond %>%
group_by(operand, presentation.time) %>%
summarise(
mean = mean(diff, na.rm = TRUE),
sem = sem(na.omit(diff))
)
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_means, geom="bar", stat="identity",
position="dodge") +
geom_errorbar(aes(ymax=mean+sem,
ymin=mean-sem),
position=position_dodge()
) +
facet_wrap(~operand)
means.barplot
means.barplot <- qplot(x=presentation.time, y=mean, fill=presentation.time,
data=ds_means, geom="bar", stat="identity",
position="dodge") +
geom_errorbar(aes(ymax=mean+sem,
ymin=mean-sem),
position=position_dodge()
)
means.barplot
lmer <- lmer(diff~presentation.time * operand + (1|subid), data=ds_byCond)
library(lme4)
lmer <- lmer(diff~presentation.time * operand + (1|subid), data=ds_byCond)
summary(lmer)
for (i in 1:100) {
mean(rnorm(30))}
mean(rnorm(30))
mean(rnorm(30))
mean(rnorm(30))
mean(rnorm(30))
mean(rnorm(30))
?rnorm
t.test(mean(rnorm(30)))
t.test(mean(rnorm(30)),mean(rnorm(30)))
t.test(rnorm(30),rnorm(30))}
t.test(rnorm(30),rnorm(30))
for (i in 1:10) {
t.test(rnorm(30),rnorm(30))}
ttest = replicate(10000,t.test(rnorm(30),rnorm(30))$statistic)
ttest
summary(ttest)
head(ttest)
ttest_sig <- ttest %>%
filter(t<-1.96 | t>1.96)
ttest$t
filter(ttest < -1.96 | ttest > 1.96)
ttest_sig <- ttest %>%
filter(ttest < -1.96 | ttest > 1.96)
str(ttest)
?count
count(ttest, >1.96)
count(ttest, 1.96)
for (i in 1:100) {
t.test(rnorm(30),rnorm(30))$statistic
}
i
rm(list = ls())
library(jsonlite)
library(ggplot2)
source("/Users/ericang/Documents/Courses/Psych254/zt12rp/data_analysis/helper/useful.R")
raw.data.path <- "/Users/ericang/Documents/Courses/Psych254/zt12rp/production-results/"
processed.data.path <- "/Users/ericang/Documents/Courses/Psych254/zt12rp/data_analysis/processed_data/"
## LOOP TO READ IN FILES
all.data <- data.frame()
files <- dir(raw.data.path,pattern="*.json")
for (file.name in files) {
print(file.name)
## these are the two functions that are most meaningful
json_file <- readLines(paste(raw.data.path,file.name,sep=""))
json_file_str = paste(json_file, collapse = "")
json_file_str = gsub(",}", "}", json_file_str)
jso = jsonlite::fromJSON(json_file_str)
jso1 <- data.frame(jso)
jso1$subid <- file.name
## now here's where data get bound together
all.data <- rbind(all.data, jso1)
}
### FILTER criteria:
## 1. exclude participants who make errors that are 3 SDs above the mean errors of the majority group
jso_sub <- all.data %>%
group_by(subid, correct) %>%
summarise(count = n()) %>%
filter(correct == 0)
mean = mean(jso_sub$count)
sd = sd(jso_sub$count)
filter(jso_sub, count > mean + 3*sd)
# need to filter: pilot_B4.json, ztrp87.json
## 2. exclude participants who have average reaction times that are 4 SDs higher than the mean of the remaining participants
jso_sub <- all.data %>%
group_by(subid) %>%
summarise(mean_rt = mean(rt))
mean = mean(jso_sub$mean_rt)
sd = sd(jso_sub$mean_rt)
filter(jso_sub, mean_rt > mean + 4*sd)
# need to filter: none
## 3. Exclude each participant’s incorrect responses
## 4. Exclude responses that took response time that is greater than 3 SDs above the overall mean response time
jso_final <- all.data %>%
filter(subid != "pilot_B4.json" & subid != "ztrp87.json") %>%
filter(correct == 1) %>%
filter(rt < mean + 3*sd) %>%
mutate(inv_rt = 1/rt)
# histogram
qplot(rt, data = jso_final, geom = "histogram")
qplot(rt, data = jso_final, geom = "histogram", facets = ~cond)
qplot(inv_rt, data = jso_final, geom = "histogram")
qplot(inv_rt, data = jso_final, geom = "histogram", facets = ~cond)
# plot of the means
jso_ms <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond) %>%
summarise(rt = mean(rt), na.rm = TRUE)
jso_mss <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond, subid) %>%
summarise(rt = mean(rt), na.rm = TRUE)
jso_ms$cih <- aggregate(rt ~ cond, jso_mss, ci.high)$rt
jso_ms$cil <- aggregate(rt ~ cond, jso_mss, ci.low)$rt
jso_ms$cond <- as.factor(jso_ms$cond)
levels(jso_ms$cond) <- c("dominant-dominant", "dominant-submissive", "submissive-submissive")
p1 <- ggplot(data = jso_ms,
aes(x=cond, y=rt, fill=cond)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=rt-cil, ymax=rt+cih),
width=.2,
position=position_dodge(.9)) +
#  coord_cartesian(ylim=c(.9,6)) +
#  scale_y_continuous(breaks=1:6) +
xlab("Condition") +
ylab("Reaction time") +
ggtitle("Reaction times for identification")
p1
raw.data.path <- "/Users/ericang/Documents/Courses/Psych254/zt12rp/production-results/"
processed.data.path <- "/Users/ericang/Documents/Courses/Psych254/zt12rp/data_analysis/processed_data/"
## LOOP TO READ IN FILES
all.data <- data.frame()
files <- dir(raw.data.path,pattern="*.json")
for (file.name in files) {
print(file.name)
## these are the two functions that are most meaningful
json_file <- readLines(paste(raw.data.path,file.name,sep=""))
json_file_str = paste(json_file, collapse = "")
json_file_str = gsub(",}", "}", json_file_str)
jso = jsonlite::fromJSON(json_file_str)
jso1 <- data.frame(jso)
jso1$subid <- file.name
## now here's where data get bound together
all.data <- rbind(all.data, jso1)
}
## FILTER criteria:
## 1. exclude participants who make errors that are 3 SDs above the mean errors of the majority group
jso_sub <- all.data %>%
group_by(subid, correct) %>%
summarise(count = n()) %>%
filter(correct == 0)
mean = mean(jso_sub$count)
sd = sd(jso_sub$count)
filter(jso_sub, count > mean + 3*sd)
# need to filter: pilot_B4.json, ztrp87.json
## 2. exclude participants who have average reaction times that are 4 SDs higher than the mean of the remaining participants
jso_sub <- all.data %>%
group_by(subid) %>%
summarise(mean_rt = mean(rt))
mean = mean(jso_sub$mean_rt)
sd = sd(jso_sub$mean_rt)
filter(jso_sub, mean_rt > mean + 4*sd)
# need to filter: none
## 3. Exclude each participant’s incorrect responses
## 4. Exclude responses that took response time that is greater than 3 SDs above the overall mean response time
jso_final <- all.data %>%
filter(subid != "pilot_B4.json" & subid != "ztrp87.json") %>%
filter(correct == 1) %>%
filter(rt < mean + 3*sd) %>%
mutate(inv_rt = 1/rt)
# histogram
qplot(rt, data = jso_final, geom = "histogram")
qplot(rt, data = jso_final, geom = "histogram", facets = ~cond)
qplot(inv_rt, data = jso_final, geom = "histogram")
qplot(inv_rt, data = jso_final, geom = "histogram", facets = ~cond)
qplot(inv_rt, data = jso_final, geom = "histogram", binwidth=.001)
)
qplot(inv_rt, data = jso_final, geom = "histogram", binwidth=.0001)
# plot of the means
jso_ms <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond) %>%
summarise(rt = mean(rt), na.rm = TRUE)
jso_mss <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond, subid) %>%
summarise(rt = mean(rt), na.rm = TRUE)
jso_ms$cih <- aggregate(rt ~ cond, jso_mss, ci.high)$rt
jso_ms$cil <- aggregate(rt ~ cond, jso_mss, ci.low)$rt
jso_ms$cond <- as.factor(jso_ms$cond)
levels(jso_ms$cond) <- c("dominant-dominant", "dominant-submissive", "submissive-submissive")
p1 <- ggplot(data = jso_ms,
aes(x=cond, y=rt, fill=cond)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=rt-cil, ymax=rt+cih),
width=.2,
position=position_dodge(.9)) +
#  coord_cartesian(ylim=c(.9,6)) +
#  scale_y_continuous(breaks=1:6) +
xlab("Condition") +
ylab("Reaction time") +
ggtitle("Reaction times for identification")
p1
jso_ms
fit <- aov(rt ~ cond + Error(subid/cond),data=jso_mss)
summary(fit)
jso_mss <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
mutate(item = substr(leftPic, 1, nchar(leftPic)-1)) %>%
group_by(cond, subid, item) %>%
summarise(rt = mean(rt), na.rm = TRUE)
jso_mss$cond <- as.factor(jso_mss$cond)
jso_mss$cond <- relevel(jso_mss$cond, "ds")
lmer <- lmer(rt ~ cond + (1 | subid) + (1 | item), data = jso_mss)
summary(lmer)
jso_ms <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond) %>%
summarise(inv_rt = mean(inv_rt), na.rm = TRUE)
jso_mss <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond, subid) %>%
summarise(inv_rt = mean(inv_rt), na.rm = TRUE)
jso_ms$cih <- aggregate(inv_rt ~ cond, jso_mss, ci.high)$inv_rt
jso_ms$cil <- aggregate(inv_rt ~ cond, jso_mss, ci.low)$inv_rt
jso_ms$cond <- as.factor(jso_ms$cond)
levels(jso_ms$cond) <- c("dominant-dominant", "dominant-submissive", "submissive-submissive")
p1 <- ggplot(data = jso_ms,
aes(x=cond, y=inv_rt, fill=cond)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=inv_rt-cil, ymax=inv_rt+cih),
width=.2,
position=position_dodge(.9)) +
#  coord_cartesian(ylim=c(.9,6)) +
#  scale_y_continuous(breaks=1:6) +
xlab("Condition") +
ylab("Average inverse reaction time") +
ggtitle("Reaction times for identification")
p1
## ANOVA
fit <- aov(inv_rt ~ cond + Error(subid/cond),data=jso_mss)
summary(fit)
## lmer?
jso_mss <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
mutate(item = substr(leftPic, 1, nchar(leftPic)-1)) %>%
group_by(cond, subid, item) %>%
summarise(inv_rt = mean(inv_rt), na.rm = TRUE)
jso_mss$cond <- as.factor(jso_mss$cond)
jso_mss$cond <- relevel(jso_mss$cond, "ds")
lmer <- lmer(inv_rt ~ cond + (1 | subid) + (1 | item), data = jso_mss)
summary(lmer)
68.35*1.96/sqrt(94)
jso_ms <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond) %>%
summarise(rt = mean(rt), na.rm = TRUE)
jso_mss <- jso_final %>%
filter(correct == 1) %>%
filter(cond != "ap") %>%
group_by(cond, subid) %>%
summarise(rt = mean(rt), na.rm = TRUE)
jso_ms$cih <- aggregate(rt ~ cond, jso_mss, ci.high)$rt
jso_ms$cil <- aggregate(rt ~ cond, jso_mss, ci.low)$rt
jso_ms$cond <- as.factor(jso_ms$cond)
levels(jso_ms$cond) <- c("dominant-dominant", "dominant-submissive", "submissive-submissive")
jso_ms$expt <- "rp"
jso_ms$na.rm <- NULL
orig <- read.table(header=T, text='
cond                  rt      cih     cil     expt
dominant-dominant     469.42  13.82  13.82  orig
dominant-submissive   459.32  12.82  12.82  orig
submissive-submissive 462.22  13.17  13.17  orig
')
rp <- rbind(jso_ms, orig)
rp$expt <- as.factor(rp$expt)
levels(rp$expt) <- c("Original", "Replication")
levels(rp$cond) <- c("both dominant","dominant-submissive", "both submissive")
p1 <- ggplot(data = rp,
aes(x=cond, y=rt, fill=cond)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=rt-cil, ymax=rt+cih),
width=.2,
position=position_dodge(.9)) +
facet_grid(.~expt) +
#  coord_cartesian(ylim=c(.9,6)) +
#  scale_y_continuous(breaks=1:6) +
xlab("Condition") +
ylab("Reaction time") +
ggtitle("Reaction times for identification")
p1
ttest = replicate(10000,t.test(rnorm(30),rnorm(30))$statistic)
ttest
str(ttest)
ttest = replicate(10000,t.test(rnorm(30),rnorm(30))$p.value)
head(ttest)
count(ttest$p.value < .05)
head(ttest$p.value)
count(ttest < .05)
ttest < .05
count(ttest < .05)
sum(ttest < .05)
sum(ttest > .05)
sum(ttest < .05) / sum(ttest)
t.test(rnorm(30),rnorm(30))$p.value
random.sample <- function(x) {
success <- FALSE
while (!success) {
# do something
i <- sample(nrow(df), 1)
x <- df[sample(nrow(df), 1), ]
# check for success
success <- x$SCORE > 0
}
return(x)
}
random.sample
random.sample()
random.sample(1)
double.sample <- function () {
success <- FALSE
while (!success) {
p.value = t.test(rnorm(30),rnorm(30))$p.value
ifelse(p.value < .05, above_chance <- TRUE & success <- TRUE, ifelse(p.value < .05, above_chance <- FALSE  & success <- TRUE, success <- FALSE))
}
return(p.value)
}
double.sample
double.sample()
double.sample <- function () {
success <- FALSE
while (!success) {
p.value = t.test(rnorm(30),rnorm(30))$p.value
ifelse(p.value < .05, above_chance = TRUE & success = TRUE, ifelse(p.value < .05, above_chance = FALSE  & success = TRUE, success = FALSE))
}
return(p.value)
}
double.sample <- function () {
success <- FALSE
p.value = t.test(rnorm(30),rnorm(30))$p.value
ifelse(p.value < .05, above_chance = TRUE, ifelse(p.value < .05, above_chance = FALSE, success = FALSE))
return(p.value)
}
double.sample()
double.sample <- function () {
success <- FALSE
p.value = t.test(rnorm(30),rnorm(30))$p.value
ifelse(p.value < .05, above_chance <- TRUE, ifelse(p.value < .05, above_chance <- FALSE, success <-FALSE))
return(p.value)
}
double.sample()
double.sample()
double.sample <- function () {
success <- FALSE
p.value = t.test(rnorm(30),rnorm(30))$p.value
ifelse(p.value < .05, above_chance <- TRUE, ifelse(p.value < .05, above_chance <- FALSE, success <-FALSE))
return(p.value, above_chance)
}
double.sample()
double.sample <- function () {
success <- FALSE
while (!success) {
p.value = t.test(rnorm(30),rnorm(30))$p.value
ifelse(p.value < .05, above_chance = TRUE & success = TRUE, ifelse(p.value < .05, above_chance = FALSE  & success = TRUE, success = FALSE))
}
return(above_chance)
}
double.sample <- function () {
success <- FALSE
p.value = t.test(rnorm(30),rnorm(30))$p.value
ifelse(p.value < .05, above_chance <- TRUE, ifelse(p.value < .05, above_chance <- FALSE, success <-FALSE))
return(above_chance)
}
double.sample()
double.sample()
double.sample()
